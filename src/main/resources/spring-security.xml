<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

<!--

        3：从数据库查询用户信息
        4：对密码进行加密
        5：配置多种校验规则（对访问的页面做权限控制）
        6：注解方式权限控制（对访问的Controller类做权限控制）
        7：退出登录
-->
<!--    1：配置可匿名访问的资源(不需要登录权限和角色，就可以访问的资源) -->
        <security:http security="none" pattern="/js/**"/>
        <security:http security="none" pattern="/img/**"/>
        <security:http security="none" pattern="/css/**"/>
<!--    2：使用指定的登录页面（login.html)-->
        <security:http security="none" pattern="/login.html"/>

    <security:http auto-config="true" use-expressions="true">
<!--        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>-->
        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/index.html"
                             authentication-failure-url="/login.html"
                             always-use-default-target="true"/>
        <security:csrf disabled="true"/>
<!--        认证通过-->
        <security:intercept-url pattern="/index.html" access="isAuthenticated()" />
<!--        认证通过-->
        <security:intercept-url pattern="/a.html" access="isAuthenticated()" />
<!--        add权限-->
        <security:intercept-url pattern="/b.html" access="hasAuthority('add')" />
<!--        ROLE_ADMIN角色， 框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html" access="hasRole('ADMIN')" />
<!--        拥有ROLE_ADMIN角色就可以访问d.html页面-->
        <security:intercept-url pattern="/d.html" access="hasRole('ABC')" />
    </security:http>

<!--    <security:http auto-config="true" use-expressions="true">-->
<!--            pattern="/**"：要求系统中的所有资源，都必须通过角色和权限才能访问-->
<!--            access 指定角色和权限
                    access="hasRole('ROLE_ADMIN')：表示具有ROLE_ADMIN的角色才能访问系统的资源
                    如果不使用表达式use-expressions="false"
                    access="ROLE_ADMIN：表示具有ROLE_ADMIN的角色才能访问系统的资源

-->
<!--            <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>-->
<!--        </security:http>-->

    <!--
          ③ 认证管理：定义登录账号和密码，并授予当前用户访问的角色或权限
            （1）：将用户名和密码：当前用户具有的角色，写死到配置文件中（现在:入门）
                    security:user name="admin" :登录名
                    authorities="ROLE_ADMIN"   ：角色(ROLE_ADMIN),权限
                    password="123456"          ：密码
             （2）：用户名和密码，当前用户具有的角色，从数据库中查询（后续）
        -->
<!--        <security:authentication-manager>-->
<!--            <security:authentication-provider>-->
<!--                <security:user-service>-->
<!--                    <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}123456"/>-->
<!--                </security:user-service>-->
<!--            </security:authentication-provider>-->
<!--        </security:authentication-manager>-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!--指定密码加密策略-->
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>

        </security:authentication-provider>
    </security:authentication-manager>
    <context:component-scan base-package="com.atguigu"/>
    <mvc:annotation-driven />
    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
</beans>